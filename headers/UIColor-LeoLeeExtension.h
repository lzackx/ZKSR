//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIColor.h>

@class NSString, UIImage;

@interface UIColor (LeoLeeExtension)
+ (id)GetColorWithTheme:(long long)arg1;
+ (id)KSYD_BookBaseColor;
+ (id)KSYD_DarkBaseColor;
+ (id)KSYD_appBaseBackGroundColor;
+ (id)KSYD_appCellColor;
+ (id)KSYD_appContainerBackGroundColor;
+ (id)KSYD_appTabbarColor;
+ (id)KSYD_appThemeColor;
+ (id)KSYD_blackColor;
+ (id)KSYD_color110;
+ (id)KSYD_color120;
+ (id)KSYD_color128;
+ (id)KSYD_color132;
+ (id)KSYD_color153;
+ (id)KSYD_color16;
+ (id)KSYD_color170;
+ (id)KSYD_color187;
+ (id)KSYD_color214;
+ (id)KSYD_color220;
+ (id)KSYD_color230;
+ (id)KSYD_color240;
+ (id)KSYD_color241;
+ (id)KSYD_color244;
+ (id)KSYD_color247;
+ (id)KSYD_color249;
+ (id)KSYD_color251;
+ (id)KSYD_color33;
+ (id)KSYD_color66;
+ (id)KSYD_color77;
+ (id)KSYD_color85;
+ (id)KSYD_color86;
+ (id)KSYD_colorBookStore;
+ (id)KSYD_colorCodeBG;
+ (id)KSYD_colorSearchBg;
+ (id)KSYD_colorSearchTextColor;
+ (id)KSYD_colorYellow;
+ (id)KSYD_horseBgColor;
+ (id)KSYD_horseBgNormalColor;
+ (id)KSYD_horseTextColor;
+ (id)KSYD_horseTextNormalColor;
+ (id)KSYD_membershipRedColor;
+ (id)KSYD_ownAdColor;
+ (id)KSYD_ownWanyiwanColor;
+ (id)KSYD_partingLineColor;
+ (id)KSYD_trueWhiteColor;
+ (id)KSYD_whiteColor;
+ (id)bu_colorWithHEX:(unsigned long long)arg1;
+ (id)bu_colorWithHEX:(unsigned long long)arg1 alpha:(double)arg2;
+ (id)bu_colorWithHexString:(id)arg1;
+ (id)bu_colorWithHexString:(id)arg1 alpha:(double)arg2;
+ (double)colorComponentFrom:(id)arg1 start:(unsigned long long)arg2 length:(unsigned long long)arg3;
+ (id)colorFromImage:(id)arg1 atPoint:(struct CGPoint)arg2;
+ (id)colorFromString_Ext:(id)arg1;
+ (id)colorWithARGB_Ext:(unsigned int)arg1;
+ (id)colorWithAverageColorFromImage:(id)arg1;
+ (id)colorWithAverageColorFromImage:(id)arg1 withAlpha:(double)arg2;
+ (id)colorWithComplementaryFlatColorOf:(id)arg1;
+ (id)colorWithComplementaryFlatColorOf:(id)arg1 withAlpha:(double)arg2;
+ (id)colorWithContrastingBlackOrWhiteColorOn:(id)arg1 isFlat:(_Bool)arg2;
+ (id)colorWithContrastingBlackOrWhiteColorOn:(id)arg1 isFlat:(_Bool)arg2 alpha:(double)arg3;
+ (id)colorWithFlatVersionFrom:(id)arg1;
+ (id)colorWithFlatVersionOf:(id)arg1;
+ (id)colorWithFlatVersionOf:(id)arg1 withAlpha:(double)arg2;
+ (id)colorWithGradientStyle:(unsigned long long)arg1 withFrame:(struct CGRect)arg2 andColors:(id)arg3;
+ (id)colorWithHex:(id)arg1;
+ (id)colorWithHexString:(id)arg1;
+ (id)colorWithHexString:(id)arg1 withAlpha:(double)arg2;
+ (id)colorWithRGBA_Ext:(unsigned int)arg1;
+ (id)colorWithRGB_Ext:(unsigned int)arg1;
+ (id)colorWithRandomColorInArray:(id)arg1;
+ (id)colorWithRandomFlatColorExcludingColorsInArray:(id)arg1;
+ (id)colorWithRandomFlatColorOfShadeStyle:(long long)arg1;
+ (id)colorWithRandomFlatColorOfShadeStyle:(long long)arg1 withAlpha:(double)arg2;
+ (_Bool)firstColor:(id)arg1 secondColor:(id)arg2;
+ (id)flatBlackColor;
+ (id)flatBlackDarkColor;
+ (id)flatBlueColor;
+ (id)flatBlueDarkColor;
+ (id)flatBrownColor;
+ (id)flatBrownDarkColor;
+ (id)flatCoffeeColor;
+ (id)flatCoffeeDarkColor;
+ (id)flatColors;
+ (id)flatForestGreenColor;
+ (id)flatForestGreenDarkColor;
+ (id)flatGrayColor;
+ (id)flatGrayDarkColor;
+ (id)flatGreenColor;
+ (id)flatGreenDarkColor;
+ (id)flatLimeColor;
+ (id)flatLimeDarkColor;
+ (id)flatMagentaColor;
+ (id)flatMagentaDarkColor;
+ (id)flatMaroonColor;
+ (id)flatMaroonDarkColor;
+ (id)flatMintColor;
+ (id)flatMintDarkColor;
+ (id)flatNavyBlueColor;
+ (id)flatNavyBlueDarkColor;
+ (id)flatOrangeColor;
+ (id)flatOrangeDarkColor;
+ (id)flatPinkColor;
+ (id)flatPinkDarkColor;
+ (id)flatPlumColor;
+ (id)flatPlumDarkColor;
+ (id)flatPowderBlueColor;
+ (id)flatPowderBlueDarkColor;
+ (id)flatPurpleColor;
+ (id)flatPurpleDarkColor;
+ (id)flatRedColor;
+ (id)flatRedDarkColor;
+ (id)flatSandColor;
+ (id)flatSandDarkColor;
+ (id)flatSkyBlueColor;
+ (id)flatSkyBlueDarkColor;
+ (id)flatTealColor;
+ (id)flatTealDarkColor;
+ (id)flatWatermelonColor;
+ (id)flatWatermelonDarkColor;
+ (id)flatWhiteColor;
+ (id)flatWhiteDarkColor;
+ (id)flatYellowColor;
+ (id)flatYellowDarkColor;
+ (id)gdt_colorWithHex:(long long)arg1;
+ (id)gdt_colorWithHex:(long long)arg1 alpha:(double)arg2;
+ (id)gdt_colorWithHexString:(id)arg1;
+ (id)gdt_colorWithHexString:(id)arg1 alpha:(double)arg2;
+ (long long)generateRandomNumberWithMax:(long long)arg1;
+ (id)getCurrentColor;
+ (id)getMyColor;
+ (id)getRandomColor;
+ (long long)getSelectCount:(long long)arg1;
+ (id)gradientImage;
+ (id)hexStringToColor:(id)arg1;
+ (unsigned int)hexValueToUnsigned:(id)arg1;
+ (id)leeTheme_ColorWithHexString:(id)arg1;
+ (id)mostColor:(id)arg1;
+ (id)nearestFlatColorForL:(double)arg1 A:(double)arg2 B:(double)arg3 alpha:(double)arg4;
+ (id)py_colorWithHexString:(id)arg1;
+ (id)py_colorWithHexString:(id)arg1;
+ (id)py_colorWithHexString:(id)arg1 alpha:(double)arg2;
+ (id)py_colorWithHexString:(id)arg1 alpha:(double)arg2;
+ (id)randomFlatColor;
+ (void)setGradientImage:(id)arg1;
+ (float)totalSumOfDifferencesFroml1:(double)arg1 l2:(double)arg2 a1:(double)arg3 a2:(double)arg4 b1:(double)arg5 b2:(double)arg6;
- (unsigned int)RGBAValue;
@property(readonly, nonatomic) double a_Ext;
- (id)arrayOfLABValuesForX:(double)arg1 Y:(double)arg2 Z:(double)arg3 alpha:(double)arg4;
- (id)arrayOfXYZValuesForR:(double)arg1 G:(double)arg2 B:(double)arg3 A:(double)arg4;
@property(readonly, nonatomic) double b_Ext;
- (id)colorWithMinimumSaturation:(double)arg1;
@property(nonatomic) unsigned long long count; // @dynamic count;
- (id)darkenByPercentage:(double)arg1;
- (id)desaturateByPercentage:(double)arg1;
- (id)flatten;
@property(readonly, nonatomic) double g_Ext;
- (_Bool)getLightness:(double *)arg1 valueForA:(double *)arg2 valueForB:(double *)arg3 alpha:(double *)arg4;
- (void)getRGBAComponents:(double [4])arg1;
- (_Bool)getValueForX:(double *)arg1 valueForY:(double *)arg2 valueForZ:(double *)arg3 alpha:(double *)arg4;
@property(readonly, copy, nonatomic) NSString *hexString_Ext;
- (id)hexValue;
- (_Bool)isDistinct:(id)arg1;
- (_Bool)isEqualToColor:(id)arg1;
- (_Bool)isMonochromeOrRGB;
@property(readonly, nonatomic) double jx_alpha;
@property(readonly, nonatomic) double jx_blue;
@property(readonly, nonatomic) double jx_green;
@property(readonly, nonatomic) double jx_red;
- (id)lightenByPercentage:(double)arg1;
@property(readonly, nonatomic) double r_Ext;
- (id)saturateByPercentage:(double)arg1;
@property(readonly, copy, nonatomic) NSString *sdBu_hexString;
@property(readonly, copy, nonatomic) NSString *sd_hexString;

// Remaining properties
@property(retain, nonatomic) UIImage *gradientImage; // @dynamic gradientImage;
@end

